'use strict';

const {StackedError} = require(`../classes/stacked-error`);
const {ProgrammerError} = require(`../classes/programmer-error`);
const ConflictError = require(`../classes/conflict-error`);
const {isNonEmptyString} = require(`../../library`);

// It seems like waste to make a DB get() request for every object we attempt
// to create. However, this is a read optimized DB framework, and we want to
// make sure we don't have conflicts, even on autogenerated UUIDs.
module.exports = function checkCreateConflict() {
	return function (api, model, args, resolve, reject) {
		const {transaction, scope, payload, options} = args;
		const {type, id} = payload;

		if (!isNonEmptyString(id)) {
			return reject(new ProgrammerError(
				`The payload.id String must be present in checkCreateConflict() store middleware.`
			));
		}
		if (!isNonEmptyString(type)) {
			return reject(new ProgrammerError(
				`The payload.type String must be present in checkCreateConflict() store middleware.`
			));
		}

		const key = {type, id};

		return transaction.get({scope, key, options}).then((res) => {
			if (res.data) {
				return reject(new ConflictError(
					`Resource '${type}' : '${id}' already exists and cannot be created`
				));
			}
			return resolve(args);
		}, (err) => {
			return reject(
				new StackedError(`Error in checkCreateConflict() store middleware`, err)
			);
		});
	};
};
